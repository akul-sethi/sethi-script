ObjString gets allocated to heap
stores its own hash
Hashmap has an array gets scaled every time 

Creating Locals:
    - Compiler stores list of Local, number of locals, current scope depth
    - A Local has its token and depth
    - Entering a block just increases and scope depth and then runs all its declerations
    - Exiting a block decrements depth. Also remove locals from stack and array if their scope is too large 
    -Split variable assingment into definiting and declaration
    - Throw error if two locals with same name are in the same scope every time local is added
Declaration
    - If its global no need
    - Otherwise add a local to the list with the correct name and depth. Set depth to -1 to mark that it declared but no defined
Definition
    - Global: add it to table
    -Local: do nothing, top thing on the stack becomes the local. Mark that it has been inititialized by setting its depth correctly 
Using Locals:
    - Resolve if it exists and return an integer which indicates its location on the stack. NOTE: This is equivalent to its index in the array by design. (-1 if does not exist)
    - Use this for local get and set

Control Flow:
    -Emit jump emits jump op and then two place holder bytes. Also returns current byte in chunk
    - patch jump takes the byte where the jump was emitted, calculates the distance to that, and replaces the placeholder with this distance
    - emit loop takes in a loop op and offset and jumps back that many codes
    - OP_JUMP_IF_FALSE
        - Jumps if last value on stack is false does not pop
    -JUMP
        - Jumps over 2 bytes of ops
    - LOOP 
        - Goes back given number of ops
    - AND 
        - hops over expression if its false
    - OR 
        - hops over if its true, needs clever implementation
    -If
        - Jumps of to else if false. Else just pops last value on stack if its empty
        - Jumps over else if it evaluates
    - WHILE
        - Jumps back to before the expression, Jumps over everything if false
    -For
        - Needs scope for variables
        - All three are optional
        - Jumps over increment in the beginning
        - Body statement than loops back to increment, which loops back to condition
        - If condition false, jump to end


Functions:
    - Fix return context
    - Fix def context
    - Add return statement to function if it does not have one.
    - Fix where OP Codes are stored for function so repl works 
    - Fix struct locals
    

TODO:
-Fix debugging 

